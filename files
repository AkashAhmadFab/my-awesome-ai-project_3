{
  "index.html": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Modern Login - Secure Authentication</title>\n    <meta name=\"description\" content=\"Secure login portal with modern design and authentication\">\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.jsx\"></script>\n  </body>\n</html>",
  "src/App.css": "/* Custom animations and styles */\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideIn {\n  from {\n    opacity: 0;\n    transform: translateX(-20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes pulse {\n  0%, 100% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.05);\n  }\n}\n\n.animate-fade-in {\n  animation: fadeIn 0.6s ease-out;\n}\n\n.animate-slide-in {\n  animation: slideIn 0.5s ease-out;\n}\n\n.animate-pulse-hover:hover {\n  animation: pulse 0.3s ease-in-out;\n}\n\n/* Custom focus styles */\n.focus-ring:focus {\n  outline: none;\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.3);\n}\n\n/* Gradient text */\n.gradient-text {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n/* Custom checkbox styles */\n.custom-checkbox {\n  appearance: none;\n  width: 1.2rem;\n  height: 1.2rem;\n  border: 2px solid #d1d5db;\n  border-radius: 4px;\n  display: inline-block;\n  position: relative;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.custom-checkbox:checked {\n  background-color: #3b82f6;\n  border-color: #3b82f6;\n}\n\n.custom-checkbox:checked::after {\n  content: '\u2713';\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: white;\n  font-size: 0.8rem;\n  font-weight: bold;\n}\n\n.custom-checkbox:hover {\n  border-color: #3b82f6;\n}\n\n.custom-checkbox:focus {\n  outline: none;\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.3);\n}",
  "src/App.jsx": "import React from 'react'\nimport { Routes, Route } from 'react-router-dom'\nimport LoginPage from './components/LoginPage'\nimport SignUpPage from './components/SignUpPage'\nimport DashboardPage from './components/DashboardPage'\nimport ForgotPasswordPage from './components/ForgotPasswordPage'\nimport { AuthProvider } from './hooks/useAuth'\nimport './App.css'\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50\">\n        <Routes>\n          <Route path=\"/\" element={<LoginPage />} />\n          <Route path=\"/login\" element={<LoginPage />} />\n          <Route path=\"/signup\" element={<SignUpPage />} />\n          <Route path=\"/dashboard\" element={<DashboardPage />} />\n          <Route path=\"/forgot-password\" element={<ForgotPasswordPage />} />\n        </Routes>\n      </div>\n    </AuthProvider>\n  )\n}\n\nexport default App",
  "package.json": "{\n  \"name\": \"modern-login-page\",\n  \"private\": true,\n  \"version\": \"0.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"preview\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-router-dom\": \"^6.8.1\",\n    \"lucide-react\": \"^0.263.1\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"^18.0.28\",\n    \"@types/react-dom\": \"^18.0.11\",\n    \"@vitejs/plugin-react\": \"^4.0.0\",\n    \"tailwindcss\": \"^4.0.0\",\n    \"vite\": \"^4.2.0\"\n  }\n}",
  "src/main.jsx": "import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './App.jsx'\nimport './index.css'\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n)",
  "src/index.css": "@import \"tailwindcss\";\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: #f1f5f9;\n}\n\n::-webkit-scrollbar-thumb {\n  background: #cbd5e1;\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: #94a3b8;\n}\n\n/* Smooth transitions */\n* {\n  transition: color 0.2s ease, background-color 0.2s ease, border-color 0.2s ease, box-shadow 0.2s ease;\n}\n\n/* Custom input focus glow */\n.input-glow:focus {\n  box-shadow: 0 0 0 1px rgba(59, 130, 246, 0.3), 0 0 20px rgba(59, 130, 246, 0.1);\n}",
  "vite.config.js": "import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n\nexport default defineConfig({\n  plugins: [react()],\n  server: {\n    port: 3000,\n    host: true\n  }\n})",
  "src/hooks/useAuth.jsx": "import React, { createContext, useContext, useState, useEffect } from 'react'\n\n/**\n * Authentication context and provider\n * Handles user authentication state, login, logout, and session management\n */\n\nconst AuthContext = createContext()\n\n/**\n * Custom hook to use authentication context\n */\nexport const useAuth = () => {\n  const context = useContext(AuthContext)\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider')\n  }\n  return context\n}\n\n/**\n * Authentication provider component\n */\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null)\n  const [isAuthenticated, setIsAuthenticated] = useState(false)\n  const [isLoading, setIsLoading] = useState(true)\n\n  /**\n   * Initialize auth state from localStorage on app start\n   */\n  useEffect(() => {\n    const initializeAuth = () => {\n      try {\n        const storedUser = localStorage.getItem('user')\n        const storedAuth = localStorage.getItem('isAuthenticated')\n        \n        if (storedUser && storedAuth === 'true') {\n          setUser(JSON.parse(storedUser))\n          setIsAuthenticated(true)\n        }\n      } catch (error) {\n        console.error('Error initializing auth:', error)\n        // Clear potentially corrupted data\n        localStorage.removeItem('user')\n        localStorage.removeItem('isAuthenticated')\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    // Add small delay to simulate loading\n    setTimeout(initializeAuth, 500)\n  }, [])\n\n  /**\n   * Login function - accepts any valid email format and password 6+ chars\n   * @param {string} email - User email address\n   * @param {string} password - User password\n   * @param {boolean} rememberMe - Whether to remember user session\n   * @returns {boolean} - Success status\n   */\n  const login = async (email, password, rememberMe = false) => {\n    try {\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 1000))\n      \n      // Basic validation (for demo purposes)\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n      if (!emailRegex.test(email)) {\n        throw new Error('Invalid email format')\n      }\n      \n      if (password.length < 6) {\n        throw new Error('Password must be at least 6 characters')\n      }\n      \n      // Create user object\n      const userData = {\n        email,\n        rememberMe,\n        loginTime: new Date().toISOString(),\n        id: Date.now().toString() // Simple ID generation\n      }\n      \n      // Update state\n      setUser(userData)\n      setIsAuthenticated(true)\n      \n      // Persist to localStorage if remember me is checked\n      if (rememberMe) {\n        localStorage.setItem('user', JSON.stringify(userData))\n        localStorage.setItem('isAuthenticated', 'true')\n      } else {\n        // Use sessionStorage for temporary sessions\n        sessionStorage.setItem('user', JSON.stringify(userData))\n        sessionStorage.setItem('isAuthenticated', 'true')\n      }\n      \n      return true\n    } catch (error) {\n      console.error('Login error:', error)\n      return false\n    }\n  }\n\n  /**\n   * Logout function - clears user data and redirects\n   */\n  const logout = () => {\n    setUser(null)\n    setIsAuthenticated(false)\n    \n    // Clear all stored data\n    localStorage.removeItem('user')\n    localStorage.removeItem('isAuthenticated')\n    sessionStorage.removeItem('user')\n    sessionStorage.removeItem('isAuthenticated')\n  }\n\n  /**\n   * Update user data\n   */\n  const updateUser = (userData) => {\n    const updatedUser = { ...user, ...userData }\n    setUser(updatedUser)\n    \n    // Update stored data if exists\n    if (localStorage.getItem('user')) {\n      localStorage.setItem('user', JSON.stringify(updatedUser))\n    }\n    if (sessionStorage.getItem('user')) {\n      sessionStorage.setItem('user', JSON.stringify(updatedUser))\n    }\n  }\n\n  /**\n   * Check if user session is valid\n   */\n  const validateSession = () => {\n    if (user && user.loginTime) {\n      const loginTime = new Date(user.loginTime)\n      const now = new Date()\n      const timeDifference = now - loginTime\n      const maxSessionTime = 24 * 60 * 60 * 1000 // 24 hours\n      \n      if (timeDifference > maxSessionTime) {\n        logout()\n        return false\n      }\n    }\n    return true\n  }\n\n  // Validate session periodically\n  useEffect(() => {\n    if (isAuthenticated) {\n      const interval = setInterval(validateSession, 60000) // Check every minute\n      return () => clearInterval(interval)\n    }\n  }, [isAuthenticated, user])\n\n  const value = {\n    user,\n    isAuthenticated,\n    isLoading,\n    login,\n    logout,\n    updateUser,\n    validateSession\n  }\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  )\n}",
  "src/components/Toast.jsx": "import React, { useEffect } from 'react'\nimport { CheckCircle, AlertCircle, X } from 'lucide-react'\n\n/**\n * Toast notification component for success/error messages\n * @param {string} message - The message to display\n * @param {string} type - Type: 'success', 'error', 'warning'\n * @param {function} onClose - Function to call when toast is closed\n * @param {number} duration - Auto-close duration in milliseconds (default: 5000)\n */\nconst Toast = ({ message, type = 'success', onClose, duration = 5000 }) => {\n  useEffect(() => {\n    if (duration > 0) {\n      const timer = setTimeout(() => {\n        onClose()\n      }, duration)\n      \n      return () => clearTimeout(timer)\n    }\n  }, [duration, onClose])\n\n  const getToastStyles = () => {\n    switch (type) {\n      case 'success':\n        return {\n          bg: 'bg-green-50 border-green-200',\n          text: 'text-green-800',\n          icon: CheckCircle,\n          iconColor: 'text-green-600'\n        }\n      case 'error':\n        return {\n          bg: 'bg-red-50 border-red-200',\n          text: 'text-red-800',\n          icon: AlertCircle,\n          iconColor: 'text-red-600'\n        }\n      case 'warning':\n        return {\n          bg: 'bg-yellow-50 border-yellow-200',\n          text: 'text-yellow-800',\n          icon: AlertCircle,\n          iconColor: 'text-yellow-600'\n        }\n      default:\n        return {\n          bg: 'bg-blue-50 border-blue-200',\n          text: 'text-blue-800',\n          icon: CheckCircle,\n          iconColor: 'text-blue-600'\n        }\n    }\n  }\n\n  const styles = getToastStyles()\n  const Icon = styles.icon\n\n  return (\n    <div className=\"fixed top-4 right-4 z-50 animate-fade-in\">\n      <div className={`max-w-sm w-full ${styles.bg} border rounded-lg shadow-lg p-4`}>\n        <div className=\"flex items-start gap-3\">\n          <Icon className={`h-5 w-5 ${styles.iconColor} flex-shrink-0 mt-0.5`} />\n          <div className=\"flex-1\">\n            <p className={`text-sm font-medium ${styles.text} leading-relaxed`}>\n              {message}\n            </p>\n          </div>\n          <button\n            onClick={onClose}\n            className={`${styles.text} hover:opacity-70 transition-opacity flex-shrink-0`}\n            aria-label=\"Close notification\"\n          >\n            <X className=\"h-4 w-4\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Toast",
  "src/components/LoginPage.jsx": "import React, { useState } from 'react'\nimport { useNavigate, Link } from 'react-router-dom'\nimport { Mail, Lock, Eye, EyeOff, Shield, CheckCircle, AlertCircle } from 'lucide-react'\nimport { useAuth } from '../hooks/useAuth'\nimport LoadingSpinner from './LoadingSpinner'\nimport Toast from './Toast'\n\n/**\n * Modern login page component with authentication and form validation\n * Features: Real-time validation, loading states, error handling, remember me functionality\n */\nconst LoginPage = () => {\n  const navigate = useNavigate()\n  const { login, isAuthenticated, isLoading } = useAuth()\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n    rememberMe: false\n  })\n  const [showPassword, setShowPassword] = useState(false)\n  const [errors, setErrors] = useState({})\n  const [toast, setToast] = useState({ show: false, message: '', type: '' })\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n  // Redirect if already authenticated\n  React.useEffect(() => {\n    if (isAuthenticated) {\n      navigate('/dashboard')\n    }\n  }, [isAuthenticated, navigate])\n\n  /**\n   * Real-time email validation\n   */\n  const validateEmail = (email) => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n    return emailRegex.test(email)\n  }\n\n  /**\n   * Handle input changes with real-time validation\n   */\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target\n    const inputValue = type === 'checkbox' ? checked : value\n\n    setFormData(prev => ({\n      ...prev,\n      [name]: inputValue\n    }))\n\n    // Real-time validation\n    if (name === 'email' && value) {\n      if (!validateEmail(value)) {\n        setErrors(prev => ({ ...prev, email: 'Please enter a valid email address' }))\n      } else {\n        setErrors(prev => ({ ...prev, email: '' }))\n      }\n    }\n\n    if (name === 'password' && value) {\n      if (value.length < 6) {\n        setErrors(prev => ({ ...prev, password: 'Password must be at least 6 characters' }))\n      } else {\n        setErrors(prev => ({ ...prev, password: '' }))\n      }\n    }\n  }\n\n  /**\n   * Handle form submission with validation and authentication\n   */\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    setIsSubmitting(true)\n    \n    // Validate form\n    const newErrors = {}\n    \n    if (!formData.email) {\n      newErrors.email = 'Email is required'\n    } else if (!validateEmail(formData.email)) {\n      newErrors.email = 'Please enter a valid email address'\n    }\n    \n    if (!formData.password) {\n      newErrors.password = 'Password is required'\n    } else if (formData.password.length < 6) {\n      newErrors.password = 'Password must be at least 6 characters'\n    }\n    \n    setErrors(newErrors)\n    \n    if (Object.keys(newErrors).length > 0) {\n      setIsSubmitting(false)\n      setToast({\n        show: true,\n        message: 'Please fix the errors above',\n        type: 'error'\n      })\n      return\n    }\n\n    try {\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 1500))\n      \n      const success = await login(formData.email, formData.password, formData.rememberMe)\n      \n      if (success) {\n        setToast({\n          show: true,\n          message: 'Login successful! Redirecting...',\n          type: 'success'\n        })\n        \n        setTimeout(() => {\n          navigate('/dashboard')\n        }, 1000)\n      } else {\n        setToast({\n          show: true,\n          message: 'Login failed. Please check your credentials.',\n          type: 'error'\n        })\n      }\n    } catch (error) {\n      setToast({\n        show: true,\n        message: 'An error occurred. Please try again.',\n        type: 'error'\n      })\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  /**\n   * Toggle password visibility\n   */\n  const togglePasswordVisibility = () => {\n    setShowPassword(prev => !prev)\n  }\n\n  /**\n   * Close toast notification\n   */\n  const closeToast = () => {\n    setToast({ show: false, message: '', type: '' })\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner size=\"large\" />\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center px-4 py-12\">\n      {/* Toast Notification */}\n      {toast.show && (\n        <Toast\n          message={toast.message}\n          type={toast.type}\n          onClose={closeToast}\n        />\n      )}\n\n      <div className=\"max-w-md w-full space-y-8 animate-fade-in\">\n        {/* Header */}\n        <div className=\"text-center animate-slide-in\">\n          <div className=\"mx-auto h-16 w-16 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center mb-6 animate-pulse-hover\">\n            <Shield className=\"h-8 w-8 text-white\" />\n          </div>\n          <h2 className=\"text-3xl font-bold gradient-text mb-2\">\n            Welcome Back\n          </h2>\n          <p className=\"text-gray-600 text-sm leading-relaxed\">\n            Sign in to access your secure dashboard\n          </p>\n        </div>\n\n        {/* Login Form */}\n        <div className=\"bg-white rounded-2xl shadow-xl p-8 border border-gray-100\">\n          <form className=\"space-y-6\" onSubmit={handleSubmit}>\n            {/* Email Field */}\n            <div className=\"space-y-2\">\n              <label htmlFor=\"email\" className=\"text-sm font-medium text-gray-700 flex items-center gap-2\">\n                <Mail className=\"h-4 w-4\" />\n                Email Address\n              </label>\n              <div className=\"relative\">\n                <input\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  autoComplete=\"email\"\n                  required\n                  className={`w-full px-4 py-3 border rounded-lg focus-ring input-glow transition-all duration-200 ${\n                    errors.email \n                      ? 'border-red-300 bg-red-50' \n                      : formData.email && !errors.email\n                      ? 'border-green-300 bg-green-50'\n                      : 'border-gray-300 bg-gray-50'\n                  } hover:border-blue-400 focus:bg-white`}\n                  placeholder=\"Enter your email\"\n                  value={formData.email}\n                  onChange={handleInputChange}\n                />\n                {formData.email && !errors.email && (\n                  <CheckCircle className=\"absolute right-3 top-3 h-5 w-5 text-green-500\" />\n                )}\n                {errors.email && (\n                  <AlertCircle className=\"absolute right-3 top-3 h-5 w-5 text-red-500\" />\n                )}\n              </div>\n              {errors.email && (\n                <p className=\"text-red-600 text-xs flex items-center gap-1 animate-slide-in\">\n                  <AlertCircle className=\"h-3 w-3\" />\n                  {errors.email}\n                </p>\n              )}\n            </div>\n\n            {/* Password Field */}\n            <div className=\"space-y-2\">\n              <label htmlFor=\"password\" className=\"text-sm font-medium text-gray-700 flex items-center gap-2\">\n                <Lock className=\"h-4 w-4\" />\n                Password\n              </label>\n              <div className=\"relative\">\n                <input\n                  id=\"password\"\n                  name=\"password\"\n                  type={showPassword ? 'text' : 'password'}\n                  autoComplete=\"current-password\"\n                  required\n                  className={`w-full px-4 py-3 pr-12 border rounded-lg focus-ring input-glow transition-all duration-200 ${\n                    errors.password \n                      ? 'border-red-300 bg-red-50' \n                      : formData.password && !errors.password\n                      ? 'border-green-300 bg-green-50'\n                      : 'border-gray-300 bg-gray-50'\n                  } hover:border-blue-400 focus:bg-white`}\n                  placeholder=\"Enter your password\"\n                  value={formData.password}\n                  onChange={handleInputChange}\n                />\n                <button\n                  type=\"button\"\n                  className=\"absolute right-3 top-3 text-gray-400 hover:text-gray-600 transition-colors\"\n                  onClick={togglePasswordVisibility}\n                  aria-label={showPassword ? 'Hide password' : 'Show password'}\n                >\n                  {showPassword ? <EyeOff className=\"h-5 w-5\" /> : <Eye className=\"h-5 w-5\" />}\n                </button>\n</div>\n              {errors.password && (\n                <p className=\"text-red-600 text-xs flex items-center gap-1 animate-slide-in\">\n                  <AlertCircle className=\"h-3 w-3\" />\n                  {errors.password}\n                </p>\n              )}\n            </div>\n\n            {/* Remember Me & Forgot Password */}\n            <div className=\"flex items-center justify-between\">\n              <label className=\"flex items-center gap-2 cursor-pointer\">\n                <input\n                  type=\"checkbox\"\n                  name=\"rememberMe\"\n                  checked={formData.rememberMe}\n                  onChange={handleInputChange}\n                  className=\"custom-checkbox\"\n                />\n                <span className=\"text-sm text-gray-600\">Remember me</span>\n              </label>\n              \n              <Link\n                to=\"/forgot-password\"\n                className=\"text-sm text-blue-600 hover:text-blue-800 hover:underline transition-colors\"\n              >\n                Forgot password?\n              </Link>\n            </div>\n\n            {/* Submit Button */}\n            <button\n              type=\"submit\"\n              disabled={isSubmitting || Object.values(errors).some(error => error)}\n              className=\"w-full flex justify-center items-center gap-2 py-3 px-4 border border-transparent rounded-lg text-white font-medium bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transform hover:scale-[1.02] active:scale-[0.98] transition-all duration-200 shadow-lg hover:shadow-xl\"\n            >\n              {isSubmitting ? (\n                <>\n                  <LoadingSpinner size=\"small\" color=\"white\" />\n                  Signing In...\n                </>\n              ) : (\n                'Sign In'\n              )}\n            </button>\n          </form>\n\n          {/* Demo Credentials */}\n          <div className=\"mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200\">\n            <p className=\"text-xs text-blue-800 font-medium mb-2\">Demo Credentials:</p>\n            <p className=\"text-xs text-blue-700\">Email: any valid email format</p>\n            <p className=\"text-xs text-blue-700\">Password: any password (6+ characters)</p>\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className=\"text-center\">\n          <p className=\"text-sm text-gray-500\">\n            Don't have an account?{' '}\n            <Link to=\"/signup\" className=\"text-blue-600 hover:text-blue-800 font-medium hover:underline transition-colors\">\n              Sign up here\n            </Link>\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default LoginPage",
  "src/components/SignUpPage.jsx": "import React, { useState } from 'react'\nimport { useNavigate, Link } from 'react-router-dom'\nimport { Mail, Lock, Eye, EyeOff, User, Shield, CheckCircle, AlertCircle } from 'lucide-react'\nimport { useAuth } from '../hooks/useAuth'\nimport LoadingSpinner from './LoadingSpinner'\nimport Toast from './Toast'\n\n/**\n * Modern sign up page component with registration and form validation\n * Features: Real-time validation, password strength checking, loading states, error handling\n */\nconst SignUpPage = () => {\n  const navigate = useNavigate()\n  const { signup, isAuthenticated, isLoading } = useAuth()\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    agreeToTerms: false\n  })\n  const [showPassword, setShowPassword] = useState(false)\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false)\n  const [errors, setErrors] = useState({})\n  const [toast, setToast] = useState({ show: false, message: '', type: '' })\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [passwordStrength, setPasswordStrength] = useState(0)\n\n  // Redirect if already authenticated\n  React.useEffect(() => {\n    if (isAuthenticated) {\n      navigate('/dashboard')\n    }\n  }, [isAuthenticated, navigate])\n\n  /**\n   * Real-time email validation\n   */\n  const validateEmail = (email) => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n    return emailRegex.test(email)\n  }\n\n  /**\n   * Calculate password strength\n   */\n  const calculatePasswordStrength = (password) => {\n    let strength = 0\n    if (password.length >= 8) strength += 1\n    if (/[A-Z]/.test(password)) strength += 1\n    if (/[a-z]/.test(password)) strength += 1\n    if (/[0-9]/.test(password)) strength += 1\n    if (/[^A-Za-z0-9]/.test(password)) strength += 1\n    return strength\n  }\n\n  /**\n   * Get password strength text and color\n   */\n  const getPasswordStrengthInfo = (strength) => {\n    const strengthLevels = [\n      { text: 'Very Weak', color: 'text-red-500', bgColor: 'bg-red-500' },\n      { text: 'Weak', color: 'text-orange-500', bgColor: 'bg-orange-500' },\n      { text: 'Fair', color: 'text-yellow-500', bgColor: 'bg-yellow-500' },\n      { text: 'Good', color: 'text-blue-500', bgColor: 'bg-blue-500' },\n      { text: 'Strong', color: 'text-green-500', bgColor: 'bg-green-500' }\n    ]\n    return strengthLevels[strength] || strengthLevels[0]\n  }\n\n  /**\n   * Handle input changes with real-time validation\n   */\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target\n    const inputValue = type === 'checkbox' ? checked : value\n\n    setFormData(prev => ({\n      ...prev,\n      [name]: inputValue\n    }))\n\n    // Real-time validation\n    if (name === 'firstName' && value) {\n      if (value.length < 2) {\n        setErrors(prev => ({ ...prev, firstName: 'First name must be at least 2 characters' }))\n      } else {\n        setErrors(prev => ({ ...prev, firstName: '' }))\n      }\n    }\n\n    if (name === 'lastName' && value) {\n      if (value.length < 2) {\n        setErrors(prev => ({ ...prev, lastName: 'Last name must be at least 2 characters' }))\n      } else {\n        setErrors(prev => ({ ...prev, lastName: '' }))\n      }\n    }\n\n    if (name === 'email' && value) {\n      if (!validateEmail(value)) {\n        setErrors(prev => ({ ...prev, email: 'Please enter a valid email address' }))\n      } else {\n        setErrors(prev => ({ ...prev, email: '' }))\n      }\n    }\n\n    if (name === 'password') {\n      const strength = calculatePasswordStrength(value)\n      setPasswordStrength(strength)\n      \n      if (value && value.length < 8) {\n        setErrors(prev => ({ ...prev, password: 'Password must be at least 8 characters' }))\n      } else {\n        setErrors(prev => ({ ...prev, password: '' }))\n      }\n\n      // Check confirm password match if it exists\n      if (formData.confirmPassword && value !== formData.confirmPassword) {\n        setErrors(prev => ({ ...prev, confirmPassword: 'Passwords do not match' }))\n      } else if (formData.confirmPassword) {\n        setErrors(prev => ({ ...prev, confirmPassword: '' }))\n      }\n    }\n\n    if (name === 'confirmPassword' && value) {\n      if (value !== formData.password) {\n        setErrors(prev => ({ ...prev, confirmPassword: 'Passwords do not match' }))\n      } else {\n        setErrors(prev => ({ ...prev, confirmPassword: '' }))\n      }\n    }\n  }\n\n  /**\n   * Handle form submission with validation and registration\n   */\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    setIsSubmitting(true)\n    \n    // Validate form\n    const newErrors = {}\n    \n    if (!formData.firstName) {\n      newErrors.firstName = 'First name is required'\n    } else if (formData.firstName.length < 2) {\n      newErrors.firstName = 'First name must be at least 2 characters'\n    }\n\n    if (!formData.lastName) {\n      newErrors.lastName = 'Last name is required'\n    } else if (formData.lastName.length < 2) {\n      newErrors.lastName = 'Last name must be at least 2 characters'\n    }\n    \n    if (!formData.email) {\n      newErrors.email = 'Email is required'\n    } else if (!validateEmail(formData.email)) {\n      newErrors.email = 'Please enter a valid email address'\n    }\n    \n    if (!formData.password) {\n      newErrors.password = 'Password is required'\n    } else if (formData.password.length < 8) {\n      newErrors.password = 'Password must be at least 8 characters'\n    }\n\n    if (!formData.confirmPassword) {\n      newErrors.confirmPassword = 'Please confirm your password'\n    } else if (formData.password !== formData.confirmPassword) {\n      newErrors.confirmPassword = 'Passwords do not match'\n    }\n\n    if (!formData.agreeToTerms) {\n      newErrors.agreeToTerms = 'You must agree to the terms and conditions'\n    }\n    \n    setErrors(newErrors)\n    \n    if (Object.keys(newErrors).length > 0) {\n      setIsSubmitting(false)\n      setToast({\n        show: true,\n        message: 'Please fix the errors above',\n        type: 'error'\n      })\n      return\n    }\n\n    try {\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 2000))\n      \n      const success = await signup({\n        firstName: formData.firstName,\n        lastName: formData.lastName,\n        email: formData.email,\n        password: formData.password\n      })\n      \n      if (success) {\n        setToast({\n          show: true,\n          message: 'Account created successfully! Redirecting...',\n          type: 'success'\n        })\n        \n        setTimeout(() => {\n          navigate('/dashboard')\n        }, 1000)\n      } else {\n        setToast({\n          show: true,\n          message: 'Registration failed. Please try again.',\n          type: 'error'\n        })\n      }\n    } catch (error) {\n      setToast({\n        show: true,\n        message: 'An error occurred. Please try again.',\n        type: 'error'\n      })\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  /**\n   * Toggle password visibility\n   */\n  const togglePasswordVisibility = () => {\n    setShowPassword(prev => !prev)\n  }\n\n  /**\n   * Toggle confirm password visibility\n   */\n  const toggleConfirmPasswordVisibility = () => {\n    setShowConfirmPassword(prev => !prev)\n  }\n\n  /**\n   * Close toast notification\n   */\n  const closeToast = () => {\n    setToast({ show: false, message: '', type: '' })\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner size=\"large\" />\n      </div>\n    )\n  }\n\n  const strengthInfo = getPasswordStrengthInfo(passwordStrength)\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center px-4 py-12\">\n      {/* Toast Notification */}\n      {toast.show && (\n        <Toast\n          message={toast.message}\n          type={toast.type}\n          onClose={closeToast}\n        />\n      )}\n\n      <div className=\"max-w-md w-full space-y-8 animate-fade-in\">\n        {/* Header */}\n        <div className=\"text-center animate-slide-in\">\n          <div className=\"mx-auto h-16 w-16 bg-gradient-to-r from-green-600 to-blue-600 rounded-full flex items-center justify-center mb-6 animate-pulse-hover\">\n            <Shield className=\"h-8 w-8 text-white\" />\n          </div>\n          <h2 className=\"text-3xl font-bold gradient-text mb-2\">\n            Create Account\n          </h2>\n          <p className=\"text-gray-600 text-sm leading-relaxed\">\n            Join us today and get started with your secure dashboard\n          </p>\n        </div>\n\n        {/* Sign Up Form */}\n        <div className=\"bg-white rounded-2xl shadow-xl p-8 border border-gray-100\">\n          <form className=\"space-y-6\" onSubmit={handleSubmit}>\n            {/* Name Fields */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              {/* First Name */}\n              <div className=\"space-y-2\">\n                <label htmlFor=\"firstName\" className=\"text-sm font-medium text-gray-700 flex items-center gap-2\">\n                  <User className=\"h-4 w-4\" />\n                  First Name\n                </label>\n                <div className=\"relative\">\n                  <input\n                    id=\"firstName\"\n                    name=\"firstName\"\n                    type=\"text\"\n                    autoComplete=\"given-name\"\n                    required\n                    className={`w-full px-4 py-3 border rounded-lg focus-ring input-glow transition-all duration-200 ${\n                      errors.firstName \n                        ? 'border-red-300 bg-red-50' \n                        : formData.firstName && !errors.firstName\n                        ? 'border-green-300 bg-green-50'\n                        : 'border-gray-300 bg-gray-50'\n                    } hover:border-blue-400 focus:bg-white`}\n                    placeholder=\"John\"\n                    value={formData.firstName}\n                    onChange={handleInputChange}\n                  />\n                  {formData.firstName && !errors.firstName && (\n                    <CheckCircle className=\"absolute right-3 top-3 h-5 w-5 text-green-500\" />\n                  )}\n                  {errors.firstName && (\n                    <AlertCircle className=\"absolute right-3 top-3 h-5 w-5 text-red-500\" />\n                  )}\n                </div>\n                {errors.firstName && (\n                  <p className=\"text-red-600 text-xs flex items-center gap-1 animate-slide-in\">\n                    <AlertCircle className=\"h-3 w-3\" />\n                    {errors.firstName}\n                  </p>\n                )}\n              </div>\n\n              {/* Last Name */}\n              <div className=\"space-y-2\">\n                <label htmlFor=\"lastName\" className=\"text-sm font-medium text-gray-700\">\n                  Last Name\n                </label>\n                <div className=\"relative\">\n                  <input\n                    id=\"lastName\"\n                    name=\"lastName\"\n                    type=\"text\"\n                    autoComplete=\"family-name\"\n                    required\n                    className={`w-full px-4 py-3 border rounded-lg focus-ring input-glow transition-all duration-200 ${\n                      errors.lastName \n                        ? 'border-red-300 bg-red-50' \n                        : formData.lastName && !errors.lastName\n                        ? 'border-green-300 bg-green-50'\n                        : 'border-gray-300 bg-gray-50'\n                    } hover:border-blue-400 focus:bg-white`}\n                    placeholder=\"Doe\"\n                    value={formData.lastName}\n                    onChange={handleInputChange}\n                  />\n                  {formData.lastName && !errors.lastName && (\n                    <CheckCircle className=\"absolute right-3 top-3 h-5 w-5 text-green-500\" />\n                  )}\n                  {errors.lastName && (\n                    <AlertCircle className=\"absolute right-3 top-3 h-5 w-5 text-red-500\" />\n                  )}\n                </div>\n                {errors.lastName && (\n                  <p className=\"text-red-600 text-xs flex items-center gap-1 animate-slide-in\">\n                    <AlertCircle className=\"h-3 w-3\" />\n                    {errors.lastName}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            {/* Email Field */}\n            <div className=\"space-y-2\">\n              <label htmlFor=\"email\" className=\"text-sm font-medium text-gray-700 flex items-center gap-2\">\n                <Mail className=\"h-4 w-4\" />\n                Email Address\n              </label>\n              <div className=\"relative\">\n                <input\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  autoComplete=\"email\"\n                  required\n                  className={`w-full px-4 py-3 border rounded-lg focus-ring input-glow transition-all duration-200 ${\n                    errors.email \n                      ? 'border-red-300 bg-red-50' \n                      : formData.email && !errors.email\n                      ? 'border-green-300 bg-green-50'\n                      : 'border-gray-300 bg-gray-50'\n                  } hover:border-blue-400 focus:bg-white`}\n                  placeholder=\"john.doe@example.com\"\n                  value={formData.email}\n                  onChange={handleInputChange}\n                />\n                {formData.email && !errors.email && (\n                  <CheckCircle className=\"absolute right-3 top-3 h-5 w-5 text-green-500\" />\n                )}\n                {errors.email && (\n                  <AlertCircle className=\"absolute right-3 top-3 h-5 w-5 text-red-500\" />\n                )}\n              </div>\n              {errors.email && (\n                <p className=\"text-red-600 text-xs flex items-center gap-1 animate-slide-in\">\n                  <AlertCircle className=\"h-3 w-3\" />\n                  {errors.email}\n                </p>\n              )}\n            </div>\n\n            {/* Password Field */}\n            <div className=\"space-y-2\">\n              <label htmlFor=\"password\" className=\"text-sm font-medium text-gray-700 flex items-center gap-2\">\n                <Lock className=\"h-4 w-4\" />\n                Password\n              </label>\n              <div className=\"relative\">\n                <input\n                  id=\"password\"\n                  name=\"password\"\n                  type={showPassword ? 'text' : 'password'}\n                  autoComplete=\"new-password\"\n                  required\n                  className={`w-full px-4 py-3 pr-12 border rounded-lg focus-ring input-glow transition-all duration-200 ${\n                    errors.password \n                      ? 'border-red-300 bg-red-50' \n                      : formData.password && !errors.password\n                      ? 'border-green-300 bg-green-50'\n                      : 'border-gray-300 bg-gray-50'\n                  } hover:border-blue-400 focus:bg-white`}\n                  placeholder=\"Create a strong password\"\n                  value={formData.password}\n                  onChange={handleInputChange}\n                />\n                <button\n                  type=\"button\"\n                  className=\"absolute right-3 top-3 text-gray-400 hover:text-gray-600 transition-colors\"\n                  onClick={togglePasswordVisibility}\n                  aria-label={showPassword ? 'Hide password' : 'Show password'}\n                >\n                  {showPassword ? <EyeOff className=\"h-5 w-5\" /> : <Eye className=\"h-5 w-5\" />}\n                </button>\n              </div>\n              \n              {/* Password Strength Indicator */}\n              {formData.password && (\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-xs text-gray-600\">Password strength:</span>\n                    <span className={`text-xs font-medium ${strengthInfo.color}`}>\n                      {strengthInfo.text}\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div \n                      className={`h-2 rounded-full transition-all duration-300 ${strengthInfo.bgColor}`}\n                      style={{ width: `${(passwordStrength / 5) * 100}%` }}\n                    ></div>\n                  </div>\n                </div>\n              )}\n              \n              {errors.password && (\n                <p className=\"text-red-600 text-xs flex items-center gap-1 animate-slide-in\">\n                  <AlertCircle className=\"h-3 w-3\" />\n                  {errors.password}\n                </p>\n              )}\n            </div>\n\n            {/* Confirm Password Field */}\n            <div className=\"space-y-2\">\n              <label htmlFor=\"confirmPassword\" className=\"text-sm font-medium text-gray-700 flex items-center gap-2\">\n                <Lock className=\"h-4 w-4\" />\n                Confirm Password\n              </label>\n              <div className=\"relative\">\n                <input\n                  id=\"confirmPassword\"\n                  name=\"confirmPassword\"\n                  type={showConfirmPassword ? 'text' : 'password'}\n                  autoComplete=\"new-password\"\n                  required\n                  className={`w-full px-4 py-3 pr-12 border rounded-lg focus-ring input-glow transition-all duration-200 ${\n                    errors.confirmPassword \n                      ? 'border-red-300 bg-red-50' \n                      : formData.confirmPassword && !errors.confirmPassword && formData.password === formData.confirmPassword\n                      ? 'border-green-300 bg-green-50'\n                      : 'border-gray-300 bg-gray-50'\n                  } hover:border-blue-400 focus:bg-white`}\n                  placeholder=\"Confirm your password\"\n                  value={formData.confirmPassword}\n                  onChange={handleInputChange}\n                />\n                <button\n                  type=\"button\"\n                  className=\"absolute right-3 top-3 text-gray-400 hover:text-gray-600 transition-colors\"\n                  onClick={toggleConfirmPasswordVisibility}\n                  aria-label={showConfirmPassword ? 'Hide password' : 'Show password'}\n                >\n                  {showConfirmPassword ? <EyeOff className=\"h-5 w-5\" /> : <Eye className=\"h-5 w-5\" />}\n                </button>\n                {formData.confirmPassword && !errors.confirmPassword && formData.password === formData.confirmPassword && (\n                  <CheckCircle className=\"absolute right-10 top-3 h-5 w-5 text-green-500\" />\n                )}\n              </div>\n              {errors.confirmPassword && (\n                <p className=\"text-red-600 text-xs flex items-center gap-1 animate-slide-in\">\n                  <AlertCircle className=\"h-3 w-3\" />\n                  {errors.confirmPassword}\n                </p>\n              )}\n            </div>\n\n            {/* Terms Agreement */}\n            <div className=\"space-y-2\">\n              <label className=\"flex items-start gap-3 cursor-pointer\">\n                <input\n                  type=\"checkbox\"\n                  name=\"agreeToTerms\"\n                  checked={formData.agreeToTerms}\n                  onChange={handleInputChange}\n                  className=\"custom-checkbox mt-1\"\n                />\n                <span className=\"text-sm text-gray-600 leading-relaxed\">\n                  I agree to the{' '}\n                  <a href=\"#\" className=\"text-blue-600 hover:text-blue-800 hover:underline\">\n                    Terms of Service\n                  </a>{' '}\n                  and{' '}\n                  <a href=\"#\" className=\"text-blue-600 hover:text-blue-800 hover:underline\">\n                    Privacy Policy\n                  </a>\n                </span>\n              </label>\n              {errors.agreeToTerms && (\n                <p className=\"text-red-600 text-xs flex items-center gap-1 animate-slide-in\">\n                  <AlertCircle className=\"h-3 w-3\" />\n                  {errors.agreeToTerms}\n                </p>\n              )}\n            </div>\n\n            {/* Submit Button */}\n            <button\n              type=\"submit\"\n              disabled={isSubmitting || Object.values(errors).some(error => error) || !formData.agreeToTerms}\n              className=\"w-full flex justify-center items-center gap-2 py-3 px-4 border border-transparent rounded-lg text-white font-medium bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:opacity-50 disabled:cursor-not-allowed transform hover:scale-[1.02] active:scale-[0.98] transition-all duration-200 shadow-lg hover:shadow-xl\"\n            >\n              {isSubmitting ? (\n                <>\n                  <LoadingSpinner size=\"small\" color=\"white\" />\n                  Creating Account...\n                </>\n              ) : (\n                'Create Account'\n              )}\n            </button>\n          </form>\n\n          {/* Demo Notice */}\n          <div className=\"mt-6 p-4 bg-green-50 rounded-lg border border-green-200\">\n            <p className=\"text-xs text-green-800 font-medium mb-2\">Demo Registration:</p>\n            <p className=\"text-xs text-green-700\">Fill in any valid information - this is a demo app!</p>\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className=\"text-center\">\n          <p className=\"text-sm text-gray-500\">\n            Already have an account?{' '}\n            <Link to=\"/login\" className=\"text-blue-600 hover:text-blue-800 font-medium hover:underline transition-colors\">\n              Sign in here\n            </Link>\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default SignUpPage",
  "src/components/DashboardPage.jsx": "import React from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { LogOut, User, Shield, CheckCircle, Clock, TrendingUp } from 'lucide-react'\nimport { useAuth } from '../hooks/useAuth'\n\n/**\n * Dashboard page component - shown after successful login\n * Features: User info display, logout functionality, welcome message\n */\nconst DashboardPage = () => {\n  const navigate = useNavigate()\n  const { user, logout, isAuthenticated } = useAuth()\n\n  // Redirect if not authenticated\n  React.useEffect(() => {\n    if (!isAuthenticated) {\n      navigate('/login')\n    }\n  }, [isAuthenticated, navigate])\n\n  /**\n   * Handle logout with confirmation\n   */\n  const handleLogout = () => {\n    if (window.confirm('Are you sure you want to logout?')) {\n      logout()\n      navigate('/login')\n    }\n  }\n\n  const stats = [\n    { label: 'Login Status', value: 'Active', icon: CheckCircle, color: 'text-green-600' },\n    { label: 'Session Time', value: '5 min', icon: Clock, color: 'text-blue-600' },\n    { label: 'Security Level', value: 'High', icon: Shield, color: 'text-purple-600' },\n    { label: 'Activity', value: 'Online', icon: TrendingUp, color: 'text-orange-600' }\n  ]\n\n  if (!isAuthenticated) {\n    return null\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"h-10 w-10 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center\">\n                <Shield className=\"h-6 w-6 text-white\" />\n              </div>\n              <h1 className=\"text-xl font-bold text-gray-900\">Dashboard</h1>\n            </div>\n            \n            <div className=\"flex items-center gap-4\">\n              <div className=\"text-sm text-gray-600\">\n                Welcome, <span className=\"font-medium text-gray-900\">{user?.email}</span>\n              </div>\n              <button\n                onClick={handleLogout}\n                className=\"flex items-center gap-2 px-4 py-2 text-sm font-medium text-red-600 hover:text-red-700 hover:bg-red-50 rounded-lg transition-colors\"\n              >\n                <LogOut className=\"h-4 w-4\" />\n                Logout\n              </button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Welcome Section */}\n        <div className=\"bg-white rounded-xl shadow-sm border p-6 mb-8 animate-fade-in\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"h-16 w-16 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center\">\n              <User className=\"h-8 w-8 text-white\" />\n            </div>\n            <div>\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-1\">\n                Welcome to your Dashboard!\n              </h2>\n              <p className=\"text-gray-600\">\n                You have successfully logged in. Your session is secure and active.\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Stats Grid */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          {stats.map((stat, index) => {\n            const Icon = stat.icon\n            return (\n              <div key={stat.label} className=\"bg-white rounded-xl shadow-sm border p-6 animate-fade-in\" style={{animationDelay: `${index * 0.1}s`}}>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-gray-500 font-medium\">{stat.label}</p>\n                    <p className={`text-lg font-bold ${stat.color} mt-1`}>{stat.value}</p>\n                  </div>\n                  <Icon className={`h-8 w-8 ${stat.color}`} />\n                </div>\n              </div>\n            )\n          })}\n        </div>\n\n        {/* User Information */}\n        <div className=\"bg-white rounded-xl shadow-sm border p-6 animate-fade-in\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Account Information</h3>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between py-3 border-b\">\n              <span className=\"text-gray-600 font-medium\">Email Address</span>\n              <span className=\"text-gray-900\">{user?.email}</span>\n            </div>\n            <div className=\"flex items-center justify-between py-3 border-b\">\n              <span className=\"text-gray-600 font-medium\">Login Method</span>\n              <span className=\"text-gray-900\">Email & Password</span>\n            </div>\n            <div className=\"flex items-center justify-between py-3 border-b\">\n              <span className=\"text-gray-600 font-medium\">Account Status</span>\n              <span className=\"inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                <CheckCircle className=\"h-3 w-3\" />\n                Active\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between py-3\">\n              <span className=\"text-gray-600 font-medium\">Remember Me</span>\n              <span className=\"text-gray-900\">{user?.rememberMe ? 'Enabled' : 'Disabled'}</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex gap-4 mt-8\">\n          <button className=\"flex items-center gap-2 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium\">\n            <User className=\"h-4 w-4\" />\n            Edit Profile\n          </button>\n          <button className=\"flex items-center gap-2 px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors font-medium\">\n            <Shield className=\"h-4 w-4\" />\n            Security Settings\n          </button>\n        </div>\n      </main>\n    </div>\n  )\n}\n\nexport default DashboardPage",
  "src/components/LoadingSpinner.jsx": "import React from 'react'\n\n/**\n * Reusable loading spinner component\n * @param {string} size - Size of spinner: 'small', 'medium', 'large'\n * @param {string} color - Color of spinner: 'blue', 'white', 'gray'\n */\nconst LoadingSpinner = ({ size = 'medium', color = 'blue' }) => {\n  const sizeClasses = {\n    small: 'h-4 w-4',\n    medium: 'h-6 w-6', \n    large: 'h-8 w-8'\n  }\n\n  const colorClasses = {\n    blue: 'text-blue-600',\n    white: 'text-white',\n    gray: 'text-gray-600'\n  }\n\n  return (\n    <svg \n      className={`animate-spin ${sizeClasses[size]} ${colorClasses[color]}`} \n      xmlns=\"http://www.w3.org/2000/svg\" \n      fill=\"none\" \n      viewBox=\"0 0 24 24\"\n    >\n      <circle \n        className=\"opacity-25\" \n        cx=\"12\" \n        cy=\"12\" \n        r=\"10\" \n        stroke=\"currentColor\" \n        strokeWidth=\"4\"\n      />\n      <path \n        className=\"opacity-75\" \n        fill=\"currentColor\" \n        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n      />\n    </svg>\n  )\n}\n\nexport default LoadingSpinner",
  "src/components/ForgotPasswordPage.jsx": "import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Mail, ArrowLeft, CheckCircle, AlertCircle, Send } from 'lucide-react'\nimport LoadingSpinner from './LoadingSpinner'\nimport Toast from './Toast'\n\n/**\n * Forgot password page component with email validation and reset functionality\n * Features: Email validation, loading states, success/error handling\n */\nconst ForgotPasswordPage = () => {\n  const [email, setEmail] = useState('')\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [isSuccess, setIsSuccess] = useState(false)\n  const [error, setError] = useState('')\n  const [toast, setToast] = useState({ show: false, message: '', type: '' })\n\n  /**\n   * Email validation function\n   */\n  const validateEmail = (email) => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n    return emailRegex.test(email)\n  }\n\n  /**\n   * Handle email input change with real-time validation\n   */\n  const handleEmailChange = (e) => {\n    const value = e.target.value\n    setEmail(value)\n    \n    if (value && !validateEmail(value)) {\n      setError('Please enter a valid email address')\n    } else {\n      setError('')\n    }\n  }\n\n  /**\n   * Handle form submission\n   */\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    \n    if (!email) {\n      setError('Email is required')\n      return\n    }\n    \n    if (!validateEmail(email)) {\n      setError('Please enter a valid email address')\n      return\n    }\n    \n    setIsSubmitting(true)\n    setError('')\n    \n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 2000))\n      \n      setIsSuccess(true)\n      setToast({\n        show: true,\n        message: 'Password reset instructions sent to your email!',\n        type: 'success'\n      })\n    } catch (error) {\n      setError('Failed to send reset email. Please try again.')\n      setToast({\n        show: true,\n        message: 'Failed to send reset email. Please try again.',\n        type: 'error'\n      })\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  /**\n   * Close toast notification\n   */\n  const closeToast = () => {\n    setToast({ show: false, message: '', type: '' })\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center px-4 py-12\">\n      {/* Toast Notification */}\n      {toast.show && (\n        <Toast\n          message={toast.message}\n          type={toast.type}\n          onClose={closeToast}\n        />\n      )}\n\n      <div className=\"max-w-md w-full space-y-8 animate-fade-in\">\n        {/* Back to Login Link */}\n        <div className=\"animate-slide-in\">\n          <Link\n            to=\"/login\"\n            className=\"inline-flex items-center gap-2 text-blue-600 hover:text-blue-800 transition-colors text-sm font-medium\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n            Back to Login\n          </Link>\n        </div>\n\n        {!isSuccess ? (\n          <>\n            {/* Header */}\n            <div className=\"text-center animate-slide-in\">\n              <div className=\"mx-auto h-16 w-16 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center mb-6 animate-pulse-hover\">\n                <Mail className=\"h-8 w-8 text-white\" />\n              </div>\n              <h2 className=\"text-3xl font-bold gradient-text mb-2\">\n                Forgot Password?\n              </h2>\n              <p className=\"text-gray-600 text-sm leading-relaxed\">\n                Enter your email address and we'll send you instructions to reset your password.\n              </p>\n            </div>\n\n            {/* Reset Form */}\n            <div className=\"bg-white rounded-2xl shadow-xl p-8 border border-gray-100\">\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                {/* Email Field */}\n                <div className=\"space-y-2\">\n                  <label htmlFor=\"email\" className=\"text-sm font-medium text-gray-700 flex items-center gap-2\">\n                    <Mail className=\"h-4 w-4\" />\n                    Email Address\n                  </label>\n                  <div className=\"relative\">\n                    <input\n                      id=\"email\"\n                      name=\"email\"\n                      type=\"email\"\n                      autoComplete=\"email\"\n                      required\n                      className={`w-full px-4 py-3 border rounded-lg focus-ring input-glow transition-all duration-200 ${\n                        error \n                          ? 'border-red-300 bg-red-50' \n                          : email && !error\n                          ? 'border-green-300 bg-green-50'\n                          : 'border-gray-300 bg-gray-50'\n                      } hover:border-blue-400 focus:bg-white`}\n                      placeholder=\"Enter your email address\"\n                      value={email}\n                      onChange={handleEmailChange}\n                    />\n                    {email && !error && (\n                      <CheckCircle className=\"absolute right-3 top-3 h-5 w-5 text-green-500\" />\n                    )}\n                    {error && (\n                      <AlertCircle className=\"absolute right-3 top-3 h-5 w-5 text-red-500\" />\n                    )}\n                  </div>\n                  {error && (\n                    <p className=\"text-red-600 text-xs flex items-center gap-1 animate-slide-in\">\n                      <AlertCircle className=\"h-3 w-3\" />\n                      {error}\n                    </p>\n                  )}\n                </div>\n\n                {/* Submit Button */}\n                <button\n                  type=\"submit\"\n                  disabled={isSubmitting || error || !email}\n                  className=\"w-full flex justify-center items-center gap-2 py-3 px-4 border border-transparent rounded-lg text-white font-medium bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transform hover:scale-[1.02] active:scale-[0.98] transition-all duration-200 shadow-lg hover:shadow-xl\"\n                >\n                  {isSubmitting ? (\n                    <>\n                      <LoadingSpinner size=\"small\" color=\"white\" />\n                      Sending...\n                    </>\n                  ) : (\n                    <>\n                      <Send className=\"h-4 w-4\" />\n                      Send Reset Instructions\n                    </>\n                  )}\n                </button>\n              </form>\n            </div>\n          </>\n        ) : (\n          /* Success State */\n          <div className=\"text-center animate-fade-in\">\n            <div className=\"mx-auto h-16 w-16 bg-green-100 rounded-full flex items-center justify-center mb-6\">\n              <CheckCircle className=\"h-8 w-8 text-green-600\" />\n            </div>\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">\n              Check Your Email\n            </h2>\n            <p className=\"text-gray-600 text-sm leading-relaxed mb-6\">\n              We've sent password reset instructions to <strong>{email}</strong>\n            </p>\n            <div className=\"bg-white rounded-2xl shadow-xl p-8 border border-gray-100 space-y-4\">\n              <p className=\"text-sm text-gray-600\">\n                Didn't receive the email? Check your spam folder or try again.\n              </p>\n              <button\n                onClick={() => {\n                  setIsSuccess(false)\n                  setEmail('')\n                }}\n                className=\"text-blue-600 hover:text-blue-800 font-medium text-sm hover:underline transition-colors\"\n              >\n                Try again\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* Footer */}\n        <div className=\"text-center\">\n          <p className=\"text-sm text-gray-500\">\n            Remember your password?{' '}\n            <Link\n              to=\"/login\"\n              className=\"text-blue-600 hover:text-blue-800 font-medium hover:underline transition-colors\"\n            >\n              Sign in here\n            </Link>\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ForgotPasswordPage"
}